//
//  StarView.swift
//  DailyNews
//
//  Generated by Copilot on 10/29/25.
//

import UIKit

final class StarView: UIView {
    
    // MARK: - Properties
    
    /// Whether the star is filled or not
    var isFilled: Bool = false {
        didSet {
            setNeedsDisplay()
        }
    }
    
    /// The color used when the star is filled
    var fillColor: UIColor = .systemYellow {
        didSet {
            setNeedsDisplay()
        }
    }
    
    /// The color used when the star is unfilled (stroke)
    var strokeColor: UIColor = .systemGray {
        didSet {
            setNeedsDisplay()
        }
    }
    
    /// The width of the stroke when unfilled
    var strokeWidth: CGFloat = 2.0 {
        didSet {
            setNeedsDisplay()
        }
    }
    
    // MARK: - Initialization
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        setupView()
    }
    
    required init?(coder: NSCoder) {
        super.init(coder: coder)
        setupView()
    }
    
    convenience init(isFilled: Bool = false, fillColor: UIColor = .systemYellow, strokeColor: UIColor = .systemGray) {
        self.init(frame: .zero)
        self.isFilled = isFilled
        self.fillColor = fillColor
        self.strokeColor = strokeColor
    }
    
    // MARK: - Setup
    
    private func setupView() {
        backgroundColor = .clear
        contentMode = .redraw
    }
    
    // MARK: - Drawing
    
    override func draw(_ rect: CGRect) {
        super.draw(rect)
        
        guard let context = UIGraphicsGetCurrentContext() else { return }
        
        let starPath = createStarPath(in: rect)
        
        if isFilled {
            // Fill the star
            context.addPath(starPath.cgPath)
            fillColor.setFill()
            context.fillPath()
        } else {
            // Stroke the star
            context.addPath(starPath.cgPath)
            strokeColor.setStroke()
            context.setLineWidth(strokeWidth)
            context.strokePath()
        }
    }
    
    // MARK: - Star Path Creation
    
    private func createStarPath(in rect: CGRect) -> UIBezierPath {
        let path = UIBezierPath()
        
        let center = CGPoint(x: rect.midX, y: rect.midY)
        let numberOfPoints: Int = 5
        let outerRadius = min(rect.width, rect.height) / 2
        let innerRadius = outerRadius * 0.4 // Inner radius is 40% of outer radius
        
        let angleIncrement = CGFloat.pi * 2 / CGFloat(numberOfPoints)
        let startAngle = -CGFloat.pi / 2 // Start from the top
        
        for i in 0..<numberOfPoints {
            // Outer point
            let outerAngle = startAngle + angleIncrement * CGFloat(i)
            let outerPoint = CGPoint(
                x: center.x + outerRadius * cos(outerAngle),
                y: center.y + outerRadius * sin(outerAngle)
            )
            
            if i == 0 {
                path.move(to: outerPoint)
            } else {
                path.addLine(to: outerPoint)
            }
            
            // Inner point
            let innerAngle = outerAngle + angleIncrement / 2
            let innerPoint = CGPoint(
                x: center.x + innerRadius * cos(innerAngle),
                y: center.y + innerRadius * sin(innerAngle)
            )
            path.addLine(to: innerPoint)
        }
        
        path.close()
        
        return path
    }
    
    // MARK: - Public Methods
    
    /// Toggle the filled state of the star with optional animation
    /// - Parameter animated: Whether to animate the change
    func toggleFilled(animated: Bool = true) {
        isFilled.toggle()
        
        if animated {
            // Add a scale animation for visual feedback
            let scaleAnimation = CAKeyframeAnimation(keyPath: "transform.scale")
            scaleAnimation.values = [1.0, 1.3, 1.0]
            scaleAnimation.keyTimes = [0, 0.5, 1]
            scaleAnimation.duration = 0.3
            layer.add(scaleAnimation, forKey: "scaleAnimation")
        }
    }
    
    /// Set the filled state
    /// - Parameters:
    ///   - filled: The filled state
    ///   - animated: Whether to animate the change
    func setFilled(_ filled: Bool, animated: Bool = true) {
        guard isFilled != filled else { return }
        
        isFilled = filled
        
        if animated {
            let scaleAnimation = CAKeyframeAnimation(keyPath: "transform.scale")
            scaleAnimation.values = [1.0, 1.3, 1.0]
            scaleAnimation.keyTimes = [0, 0.5, 1]
            scaleAnimation.duration = 0.3
            layer.add(scaleAnimation, forKey: "scaleAnimation")
        }
    }
}
